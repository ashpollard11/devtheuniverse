{"version":3,"sources":["vue-touch.js"],"names":["vueTouch","Hammer","require","window","gestures","directions","customEvents","Error","config","install","Vue","directive","isFn","acceptStatement","priority","bind","el","hammer","Manager","mc","event","arg","console","warn","recognizerType","recognizer","custom","type","capitalize","recognizeWith","recognizers","add","i","length","indexOf","get","globalOptions","guardDirections","set","localOptions","hammerOptions","update","fn","handler","off","descriptor","raw","on","unbind","Object","keys","handlers","destroy","options","opts","registerCustomEvent","str","charAt","toUpperCase","slice","dir","direction","hammerDirection","hasOwnProperty","exports","module","define","amd","VueTouch","use"],"mappings":";;;;AAAA,CAAC,CAAC,YAAY;;AAEZ,MAAIA,WAAW,EAAf;AACA,MAAIC,SAAS,OAAOC,OAAP,KAAmB,UAAnB,GACTA,QAAQ,UAAR,CADS,GAETC,OAAOF,MAFX;AAGA,MAAIG,WAAW,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,EAAwB,OAAxB,EAAiC,QAAjC,EAA2C,OAA3C,CAAf;AACA,MAAIC,aAAa,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,OAAvB,EAAgC,YAAhC,EAA8C,UAA9C,EAA0D,KAA1D,CAAjB;AACA,MAAIC,eAAe,EAAnB;;AAEA,MAAI,CAACL,MAAL,EAAa;AACX,UAAM,IAAIM,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED;AACAP,WAASQ,MAAT,GAAkB,EAAlB;;AAEAR,WAASS,OAAT,GAAmB,UAAUC,GAAV,EAAe;;AAEhCA,QAAIC,SAAJ,CAAc,OAAd,EAAuB;;AAErBC,YAAM,IAFe;AAGrBC,uBAAiB,IAHI;AAIrBC,gBAAUJ,IAAIC,SAAJ,CAAc,IAAd,EAAoBG,QAJT;;AAMrBC,YAAM,gBAAY;AAChB,YAAI,CAAC,KAAKC,EAAL,CAAQC,MAAb,EAAqB;AACnB,eAAKD,EAAL,CAAQC,MAAR,GAAiB,IAAIhB,OAAOiB,OAAX,CAAmB,KAAKF,EAAxB,CAAjB;AACD;AACD,YAAIG,KAAK,KAAKA,EAAL,GAAU,KAAKH,EAAL,CAAQC,MAA3B;AACA;AACA,YAAIG,QAAQ,KAAKC,GAAjB;AACA,YAAI,CAACD,KAAL,EAAY;AACVE,kBAAQC,IAAR,CAAa,8CAAb;AACD;AACD,YAAIC,cAAJ,EAAoBC,UAApB;;AAEA,YAAInB,aAAac,KAAb,CAAJ,EAAyB;AACvB;AACA,cAAIM,SAASpB,aAAac,KAAb,CAAb;AACAI,2BAAiBE,OAAOC,IAAxB;AACAF,uBAAa,IAAIxB,OAAO2B,WAAWJ,cAAX,CAAP,CAAJ,CAAuCE,MAAvC,CAAb;AACAD,qBAAWI,aAAX,CAAyBV,GAAGW,WAA5B;AACAX,aAAGY,GAAH,CAAON,UAAP;AACD,SAPD,MAOO;AACL;AACA,eAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAI5B,SAAS6B,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,gBAAIZ,MAAMc,OAAN,CAAc9B,SAAS4B,CAAT,CAAd,MAA+B,CAAnC,EAAsC;AACpCR,+BAAiBpB,SAAS4B,CAAT,CAAjB;AACA;AACD;AACF;AACD,cAAI,CAACR,cAAL,EAAqB;AACnBF,oBAAQC,IAAR,CAAa,qCAAqCH,KAAlD;AACA;AACD;AACDK,uBAAaN,GAAGgB,GAAH,CAAOX,cAAP,CAAb;AACA,cAAI,CAACC,UAAL,EAAiB;AACf;AACAA,yBAAa,IAAIxB,OAAO2B,WAAWJ,cAAX,CAAP,CAAJ,EAAb;AACA;AACAC,uBAAWI,aAAX,CAAyBV,GAAGW,WAA5B;AACAX,eAAGY,GAAH,CAAON,UAAP;AACD;AACD;AACA,cAAIW,gBAAgBpC,SAASQ,MAAT,CAAgBgB,cAAhB,CAApB;AACA,cAAIY,aAAJ,EAAmB;AACjBC,4BAAgBD,aAAhB;AACAX,uBAAWa,GAAX,CAAeF,aAAf;AACD;AACD;AACA,cAAIG,eACF,KAAKvB,EAAL,CAAQwB,aAAR,IACA,KAAKxB,EAAL,CAAQwB,aAAR,CAAsBhB,cAAtB,CAFF;AAGA,cAAIe,YAAJ,EAAkB;AAChBF,4BAAgBE,YAAhB;AACAd,uBAAWa,GAAX,CAAeC,YAAf;AACD;AACF;AACD,aAAKd,UAAL,GAAkBA,UAAlB;AACD,OA7DoB;;AA+DrBgB,cAAQ,gBAAUC,EAAV,EAAc;AACpB,YAAIvB,KAAK,KAAKA,EAAd;AACA,YAAIC,QAAQ,KAAKC,GAAjB;AACA;AACA,YAAI,KAAKsB,OAAT,EAAkB;AAChBxB,aAAGyB,GAAH,CAAOxB,KAAP,EAAc,KAAKuB,OAAnB;AACD;AACD,YAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC5B,eAAKC,OAAL,GAAe,IAAf;AACArB,kBAAQC,IAAR,CACE,uDACA,KAAKF,GADL,GACW,IADX,GACkB,KAAKwB,UAAL,CAAgBC,GAFpC;AAID,SAND,MAMO;AACL3B,aAAG4B,EAAH,CAAM3B,KAAN,EAAc,KAAKuB,OAAL,GAAeD,EAA7B;AACD;AACF,OA/EoB;;AAiFrBM,cAAQ,kBAAY;AAClB,YAAI,KAAKL,OAAT,EAAkB;AAChB,eAAKxB,EAAL,CAAQyB,GAAR,CAAY,KAAKvB,GAAjB,EAAsB,KAAKsB,OAA3B;AACD;AACD,YAAI,CAACM,OAAOC,IAAP,CAAY,KAAK/B,EAAL,CAAQgC,QAApB,EAA8BlB,MAAnC,EAA2C;AACzC,eAAKd,EAAL,CAAQiC,OAAR;AACA,eAAKpC,EAAL,CAAQC,MAAR,GAAiB,IAAjB;AACD;AACF;AAzFoB,KAAvB;;AA4FAP,QAAIC,SAAJ,CAAc,eAAd,EAA+B;AAC7BG,gBAAUJ,IAAIC,SAAJ,CAAc,IAAd,EAAoBG,QAApB,GAA+B,CADZ;AAE7B2B,cAAQ,gBAAUY,OAAV,EAAmB;AACzB,YAAIC,OAAO,KAAKtC,EAAL,CAAQwB,aAAR,KAA0B,KAAKxB,EAAL,CAAQwB,aAAR,GAAwB,EAAlD,CAAX;AACA,YAAI,CAAC,KAAKnB,GAAV,EAAe;AACbC,kBAAQC,IAAR,CAAa,uEAAb;AACD,SAFD,MAEO;AACL+B,eAAK,KAAKjC,GAAV,IAAiBgC,OAAjB;AACD;AACF;AAT4B,KAA/B;AAWD,GAzGD;;AA2GA;;;;;;;;;AASArD,WAASuD,mBAAT,GAA+B,UAAUnC,KAAV,EAAiBiC,OAAjB,EAA0B;AACvDA,YAAQjC,KAAR,GAAgBA,KAAhB;AACAd,iBAAac,KAAb,IAAsBiC,OAAtB;AACD,GAHD;;AAKA,WAASzB,UAAT,CAAqB4B,GAArB,EAA0B;AACxB,WAAOA,IAAIC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,IAAIG,KAAJ,CAAU,CAAV,CAArC;AACD;;AAED,WAAStB,eAAT,CAA0BgB,OAA1B,EAAmC;AACjC,QAAIO,MAAMP,QAAQQ,SAAlB;AACA,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAIE,kBAAkB,eAAeF,IAAIF,WAAJ,EAArC;AACA,UAAIrD,WAAW6B,OAAX,CAAmB0B,GAAnB,IAA0B,CAAC,CAA3B,IAAgC3D,OAAO8D,cAAP,CAAsBD,eAAtB,CAApC,EAA4E;AAC1ET,gBAAQQ,SAAR,GAAoB5D,OAAO6D,eAAP,CAApB;AACD,OAFD,MAEO;AACLxC,gBAAQC,IAAR,CAAa,oCAAoCqC,GAAjD;AACD;AACF;AACF;;AAED,MAAI,QAAOI,OAAP,yCAAOA,OAAP,MAAkB,QAAtB,EAAgC;AAC9BC,WAAOD,OAAP,GAAiBhE,QAAjB;AACD,GAFD,MAEO,IAAI,OAAOkE,MAAP,IAAiB,UAAjB,IAA+BA,OAAOC,GAA1C,EAA+C;AACpDD,WAAO,EAAP,EAAW,YAAU;AAAE,aAAOlE,QAAP;AAAiB,KAAxC;AACD,GAFM,MAEA,IAAIG,OAAOO,GAAX,EAAgB;AACrBP,WAAOiE,QAAP,GAAkBpE,QAAlB;AACAU,QAAI2D,GAAJ,CAAQrE,QAAR;AACD;AAEF,CAnKA","file":"vue-touch.js","sourcesContent":[";(function () {\n\n  var vueTouch = {}\n  var Hammer = typeof require === 'function'\n    ? require('hammerjs')\n    : window.Hammer\n  var gestures = ['tap', 'pan', 'pinch', 'press', 'rotate', 'swipe']\n  var directions = ['up', 'down', 'left', 'right', 'horizontal', 'vertical', 'all']\n  var customEvents = {}\n\n  if (!Hammer) {\n    throw new Error('[vue-touch] cannot locate Hammer.js.')\n  }\n\n  // exposed global options\n  vueTouch.config = {}\n\n  vueTouch.install = function (Vue) {\n\n    Vue.directive('touch', {\n\n      isFn: true,\n      acceptStatement: true,\n      priority: Vue.directive('on').priority,\n\n      bind: function () {\n        if (!this.el.hammer) {\n          this.el.hammer = new Hammer.Manager(this.el)\n        }\n        var mc = this.mc = this.el.hammer\n        // determine event type\n        var event = this.arg\n        if (!event) {\n          console.warn('[vue-touch] event type argument is required.')\n        }\n        var recognizerType, recognizer\n\n        if (customEvents[event]) {\n          // custom event\n          var custom = customEvents[event]\n          recognizerType = custom.type\n          recognizer = new Hammer[capitalize(recognizerType)](custom)\n          recognizer.recognizeWith(mc.recognizers)\n          mc.add(recognizer)\n        } else {\n          // built-in event\n          for (var i = 0; i < gestures.length; i++) {\n            if (event.indexOf(gestures[i]) === 0) {\n              recognizerType = gestures[i]\n              break\n            }\n          }\n          if (!recognizerType) {\n            console.warn('[vue-touch] invalid event type: ' + event)\n            return\n          }\n          recognizer = mc.get(recognizerType)\n          if (!recognizer) {\n            // add recognizer\n            recognizer = new Hammer[capitalize(recognizerType)]()\n            // make sure multiple recognizers work together...\n            recognizer.recognizeWith(mc.recognizers)\n            mc.add(recognizer)\n          }\n          // apply global options\n          var globalOptions = vueTouch.config[recognizerType]\n          if (globalOptions) {\n            guardDirections(globalOptions)\n            recognizer.set(globalOptions)\n          }\n          // apply local options\n          var localOptions =\n            this.el.hammerOptions &&\n            this.el.hammerOptions[recognizerType]\n          if (localOptions) {\n            guardDirections(localOptions)\n            recognizer.set(localOptions)\n          }\n        }\n        this.recognizer = recognizer\n      },\n\n      update: function (fn) {\n        var mc = this.mc\n        var event = this.arg\n        // teardown old handler\n        if (this.handler) {\n          mc.off(event, this.handler)\n        }\n        if (typeof fn !== 'function') {\n          this.handler = null\n          console.warn(\n            '[vue-touch] invalid handler function for v-touch: ' +\n            this.arg + '=\"' + this.descriptor.raw\n          )\n        } else {\n          mc.on(event, (this.handler = fn))\n        }\n      },\n\n      unbind: function () {\n        if (this.handler) {\n          this.mc.off(this.arg, this.handler)\n        }\n        if (!Object.keys(this.mc.handlers).length) {\n          this.mc.destroy()\n          this.el.hammer = null\n        }\n      }\n    })\n\n    Vue.directive('touch-options', {\n      priority: Vue.directive('on').priority + 1,\n      update: function (options) {\n        var opts = this.el.hammerOptions || (this.el.hammerOptions = {})\n        if (!this.arg) {\n          console.warn('[vue-touch] recognizer type argument for v-touch-options is required.')\n        } else {\n          opts[this.arg] = options\n        }\n      }\n    })\n  }\n\n  /**\n   * Register a custom event.\n   *\n   * @param {String} event\n   * @param {Object} options - a Hammer.js recognizer option object.\n   *                           required fields:\n   *                           - type: the base recognizer to use for this event\n   */\n\n  vueTouch.registerCustomEvent = function (event, options) {\n    options.event = event\n    customEvents[event] = options\n  }\n\n  function capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  function guardDirections (options) {\n    var dir = options.direction\n    if (typeof dir === 'string') {\n      var hammerDirection = 'DIRECTION_' + dir.toUpperCase()\n      if (directions.indexOf(dir) > -1 && Hammer.hasOwnProperty(hammerDirection)) {\n        options.direction = Hammer[hammerDirection]\n      } else {\n        console.warn('[vue-touch] invalid direction: ' + dir)\n      }\n    }\n  }\n\n  if (typeof exports == \"object\") {\n    module.exports = vueTouch\n  } else if (typeof define == \"function\" && define.amd) {\n    define([], function(){ return vueTouch })\n  } else if (window.Vue) {\n    window.VueTouch = vueTouch\n    Vue.use(vueTouch)\n  }\n\n})()\n"]}